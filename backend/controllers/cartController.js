const Cart = require("../models/Cart");
const Product = require("../models/Product");
const Order = require("../models/Order");

// üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
const addToCart = async (req, res) => {
  try {
    const { user, product, quantity } = req.body;

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    const existingProduct = await Product.findById(product);
    if (!existingProduct) {
      return res
        .status(200)
        .json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng h·ª£p l·ªá
    if (quantity <= 0) {
      return res
        .status(200)
        .json({ success: false, message: "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0!" });
    }

    // Ki·ªÉm tra kho h√†ng
    if (quantity > existingProduct.stock) {
      return res
        .status(200)
        .json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng ƒë·ªß h√†ng!" });
    }

    let cart = await Cart.findOne({ user });
    if (!cart) {
      cart = new Cart({ user, items: [] });
    }

    const existingItem = cart.items.find(
      (item) => item.product.toString() === product
    );
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ product, quantity });
    }

    await cart.save();
    res.status(200).json({
      success: true,
      message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!",
      cart,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi th√™m v√†o gi·ªè h√†ng!", error });
  }
};

// üõ† Ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
const updateCart = async (req, res) => {
  try {
    const { user, product, quantity } = req.body;

    let cart = await Cart.findOne({ user });
    if (!cart) {
      return res
        .status(200)
        .json({ success: false, message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    const itemIndex = cart.items.findIndex(
      (item) => item.product.toString() === product
    );
    if (itemIndex === -1) {
      return res
        .status(200)
        .json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng!" });
    }

    if (quantity <= 0) {
      // N·∫øu s·ªë l∆∞·ª£ng <= 0, t·ª± ƒë·ªông x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
      cart.items.splice(itemIndex, 1);
    } else {
      cart.items[itemIndex].quantity = quantity;
    }

    await cart.save();
    res.status(200).json({
      success: true,
      message: "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
      cart,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng!", error });
  }
};

// ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
const removeFromCart = async (req, res) => {
  try {
    const { user, product } = req.body;

    let cart = await Cart.findOne({ user });
    if (!cart) {
      return res
        .status(200)
        .json({ success: false, message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    cart.items = cart.items.filter(
      (item) => item.product.toString() !== product
    );

    await cart.save();
    res.status(200).json({
      success: true,
      message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!",
      cart,
    });
  } catch (error) {
    res
      .status(500)
      .json({
        success: false,
        message: "L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng!",
        error,
      });
  }
};

// üóë X√≥a to√†n b·ªô gi·ªè h√†ng
const clearCart = async (req, res) => {
  try {
    const { user } = req.body;

    let cart = await Cart.findOne({ user });
    if (!cart) {
      return res
        .status(200)
        .json({ success: false, message: "Gi·ªè h√†ng ƒë√£ tr·ªëng!" });
    }

    cart.items = []; // X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
    await cart.save();

    res.status(200).json({
      success: true,
      message: "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c l√†m tr·ªëng!",
      cart,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi x√≥a gi·ªè h√†ng!", error });
  }
};

// üõçÔ∏è T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
const createOrder = async (req, res) => {
  try {
    const { shippingAddress, paymentMethod } = req.body;

    // Ki·ªÉm tra gi·ªè h√†ng
    const cart = await Cart.findOne({ user: req.user._id }).populate(
      "items.product"
    );
    if (!cart || cart.items.length === 0) {
      return res
        .status(200)
        .json({ success: false, message: "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!" });
    }

    // Ki·ªÉm tra ƒë·ªãa ch·ªâ giao h√†ng
    if (!shippingAddress || shippingAddress.length < 10) {
      return res
        .status(200)
        .json({ success: false, message: "ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng h·ª£p l·ªá!" });
    }

    // Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n
    if (!["cod", "online"].includes(paymentMethod)) {
      return res
        .status(200)
        .json({
          success: false,
          message: "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá!",
        });
    }

    // T√≠nh t·ªïng ti·ªÅn
    const totalPrice = cart.items.reduce(
      (acc, item) => acc + item.product.price * item.quantity,
      0
    );

    // T·∫°o ƒë∆°n h√†ng m·ªõi
    const order = new Order({
      user: req.user._id,
      orderItems: cart.items,
      totalPrice,
      shippingAddress,
      paymentMethod,
      status: "pending",
    });

    await order.save();

    // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng
    await Cart.findOneAndDelete({ user: req.user._id });

    res.status(200).json({
      success: true,
      message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
      order,
    });
  } catch (error) {
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi t·∫°o ƒë∆°n h√†ng!", error });
  }
};

module.exports = {
  addToCart,
  updateCart,
  removeFromCart,
  clearCart,
  createOrder,
};
