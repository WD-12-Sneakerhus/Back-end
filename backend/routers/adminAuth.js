const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Admin = require("../models/adminModel");

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || "your_jwt_secret_key";

// üü¢ API ƒêƒÉng k√Ω Admin (Ch·ªâ ƒë·ªÉ test, sau n√†y c√≥ th·ªÉ t·∫Øt)
router.post("/register", async (req, res) => {
  const { email, password } = req.body;

  try {
    const adminExists = await Admin.findOne({ email });
    if (adminExists) {
      return res.status(400).json({ message: "Admin ƒë√£ t·ªìn t·∫°i!" });
    }

    const newAdmin = new Admin({ email, password });
    await newAdmin.save();

    res.json({ message: "Admin ƒëƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!" });
  }
});

// üü° API ƒêƒÉng nh·∫≠p Admin
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const admin = await Admin.findOne({ email });
    if (!admin)
      return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });

    const token = jwt.sign({ id: admin._id, role: "admin" }, JWT_SECRET, {
      expiresIn: "1h",
    });

    res.json({ token, adminId: admin._id });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!" });
  }
});

module.exports = router;
